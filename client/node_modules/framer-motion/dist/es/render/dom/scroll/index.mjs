import { memo } from '../../../utils/memo.mjs';
import { scrollInfo } from './track.mjs';
import { frame, cancelFrame } from '../../../frameloop/frame.mjs';

const supportsScrollTimeline = memo(() => window.ScrollTimeline !== undefined);
function scrollTimelineFallback({ source, axis = "y" }) {
    // ScrollTimeline records progress as a percentage CSSUnitValue
    const currentTime = { value: 0 };
    const cancel = scrollInfo((info) => {
        currentTime.value = info[axis].progress * 100;
    }, { container: source, axis });
    return { currentTime, cancel };
}
const timelineCache = new Map();
function getTimeline({ source = document.documentElement, axis = "y", } = {}) {
    if (!timelineCache.has(source)) {
        timelineCache.set(source, {});
    }
    const elementCache = timelineCache.get(source);
    if (!elementCache[axis]) {
        elementCache[axis] = supportsScrollTimeline()
            ? new ScrollTimeline({ source, axis })
            : scrollTimelineFallback({ source, axis });
    }
    return elementCache[axis];
}
function scroll(onScroll, options) {
    const timeline = getTimeline(options);
    let prevProgress;
    const onFrame = () => {
        const { currentTime } = timeline;
        const percentage = currentTime === null ? 0 : currentTime.value;
        const progress = percentage / 100;
        if (prevProgress !== progress) {
            onScroll(progress);
        }
        prevProgress = progress;
    };
    frame.update(onFrame, true);
    return () => {
        cancelFrame(onFrame);
        if (timeline.cancel)
            timeline.cancel();
    };
}

export { scroll };
